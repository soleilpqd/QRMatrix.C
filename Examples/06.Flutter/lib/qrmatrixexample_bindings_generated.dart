// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for `src/qrmatrixexample.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class QrmatrixexampleBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  QrmatrixexampleBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  QrmatrixexampleBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void QrmBoardDestroy(
    ffi.Pointer<QrmBoard> board,
  ) {
    return _QrmBoardDestroy(
      board,
    );
  }

  late final _QrmBoardDestroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<QrmBoard>)>>(
          'QrmBoardDestroy');
  late final _QrmBoardDestroy =
      _QrmBoardDestroyPtr.asFunction<void Function(ffi.Pointer<QrmBoard>)>();

  QrmBoard QrmBoardDuplicate(
    QrmBoard other,
  ) {
    return _QrmBoardDuplicate(
      other,
    );
  }

  late final _QrmBoardDuplicatePtr =
      _lookup<ffi.NativeFunction<QrmBoard Function(QrmBoard)>>(
          'QrmBoardDuplicate');
  late final _QrmBoardDuplicate =
      _QrmBoardDuplicatePtr.asFunction<QrmBoard Function(QrmBoard)>();

  void QrmBoardCopy(
    ffi.Pointer<QrmBoard> board,
    QrmBoard other,
  ) {
    return _QrmBoardCopy(
      board,
      other,
    );
  }

  late final _QrmBoardCopyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<QrmBoard>, QrmBoard)>>(
      'QrmBoardCopy');
  late final _QrmBoardCopy = _QrmBoardCopyPtr.asFunction<
      void Function(ffi.Pointer<QrmBoard>, QrmBoard)>();

  /// Place holder. Internal purpose. Do not use.
  QrmBoard QrmBoardCreateEmpty() {
    return _QrmBoardCreateEmpty();
  }

  late final _QrmBoardCreateEmptyPtr =
      _lookup<ffi.NativeFunction<QrmBoard Function()>>('QrmBoardCreateEmpty');
  late final _QrmBoardCreateEmpty =
      _QrmBoardCreateEmptyPtr.asFunction<QrmBoard Function()>();

  /// To create QR board, refer `QRMatrixEncoder`.
  /// This constructor is for internal purpose.
  QrmBoard QrmBoardCreate(
    ffi.Pointer<UnsignedByte> data,
    ffi.Pointer<UnsignedByte> errorCorrection,
    QrmSymbolInfo ecInfo,
    int maskId,
    bool isMicro,
  ) {
    return _QrmBoardCreate(
      data,
      errorCorrection,
      ecInfo,
      maskId,
      isMicro,
    );
  }

  late final _QrmBoardCreatePtr = _lookup<
      ffi.NativeFunction<
          QrmBoard Function(
              ffi.Pointer<UnsignedByte>,
              ffi.Pointer<UnsignedByte>,
              QrmSymbolInfo,
              UnsignedByte,
              ffi.Bool)>>('QrmBoardCreate');
  late final _QrmBoardCreate = _QrmBoardCreatePtr.asFunction<
      QrmBoard Function(ffi.Pointer<UnsignedByte>, ffi.Pointer<UnsignedByte>,
          QrmSymbolInfo, int, bool)>();

  void QrmBoardPrintDescription(
    QrmBoard board,
    bool isTypeVisible,
  ) {
    return _QrmBoardPrintDescription(
      board,
      isTypeVisible,
    );
  }

  late final _QrmBoardPrintDescriptionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(QrmBoard, ffi.Bool)>>(
          'QrmBoardPrintDescription');
  late final _QrmBoardPrintDescription =
      _QrmBoardPrintDescriptionPtr.asFunction<void Function(QrmBoard, bool)>();

  /// Destructor
  void QrmSegDestroy(
    ffi.Pointer<QrmSegment> segment,
  ) {
    return _QrmSegDestroy(
      segment,
    );
  }

  late final _QrmSegDestroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<QrmSegment>)>>(
          'QrmSegDestroy');
  late final _QrmSegDestroy =
      _QrmSegDestroyPtr.asFunction<void Function(ffi.Pointer<QrmSegment>)>();

  /// Create QR segment
  QrmSegment QrmSegCreate(
    int mode,
    ffi.Pointer<UnsignedByte> data,
    int length,
    int eciIndicator,
  ) {
    return _QrmSegCreate(
      mode,
      data,
      length,
      eciIndicator,
    );
  }

  late final _QrmSegCreatePtr = _lookup<
      ffi.NativeFunction<
          QrmSegment Function(ffi.Int32, ffi.Pointer<UnsignedByte>,
              ffi.UnsignedInt, ffi.UnsignedInt)>>('QrmSegCreate');
  late final _QrmSegCreate = _QrmSegCreatePtr.asFunction<
      QrmSegment Function(int, ffi.Pointer<UnsignedByte>, int, int)>();

  /// Create empty and set later
  QrmSegment QrmSegCreateEmpty() {
    return _QrmSegCreateEmpty();
  }

  late final _QrmSegCreateEmptyPtr =
      _lookup<ffi.NativeFunction<QrmSegment Function()>>('QrmSegCreateEmpty');
  late final _QrmSegCreateEmpty =
      _QrmSegCreateEmptyPtr.asFunction<QrmSegment Function()>();

  /// Fill segment with given data
  void QrmSegFill(
    ffi.Pointer<QrmSegment> segment,
    int mode,
    ffi.Pointer<UnsignedByte> data,
    int length,
    int eciIndicator,
  ) {
    return _QrmSegFill(
      segment,
      mode,
      data,
      length,
      eciIndicator,
    );
  }

  late final _QrmSegFillPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<QrmSegment>,
              ffi.Int32,
              ffi.Pointer<UnsignedByte>,
              ffi.UnsignedInt,
              ffi.UnsignedInt)>>('QrmSegFill');
  late final _QrmSegFill = _QrmSegFillPtr.asFunction<
      void Function(
          ffi.Pointer<QrmSegment>, int, ffi.Pointer<UnsignedByte>, int, int)>();

  void QrmSegCopy(
    ffi.Pointer<QrmSegment> segment,
    QrmSegment other,
  ) {
    return _QrmSegCopy(
      segment,
      other,
    );
  }

  late final _QrmSegCopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<QrmSegment>, QrmSegment)>>('QrmSegCopy');
  late final _QrmSegCopy = _QrmSegCopyPtr.asFunction<
      void Function(ffi.Pointer<QrmSegment>, QrmSegment)>();

  /// Copy constructor
  QrmSegment QrmSegDuplicate(
    QrmSegment other,
  ) {
    return _QrmSegDuplicate(
      other,
    );
  }

  late final _QrmSegDuplicatePtr =
      _lookup<ffi.NativeFunction<QrmSegment Function(QrmSegment)>>(
          'QrmSegDuplicate');
  late final _QrmSegDuplicate =
      _QrmSegDuplicatePtr.asFunction<QrmSegment Function(QrmSegment)>();

  /// Destructor
  void QrmExtraDestroy(
    ffi.Pointer<QrmExtraEncodingInfo> info,
  ) {
    return _QrmExtraDestroy(
      info,
    );
  }

  late final _QrmExtraDestroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<QrmExtraEncodingInfo>)>>('QrmExtraDestroy');
  late final _QrmExtraDestroy = _QrmExtraDestroyPtr.asFunction<
      void Function(ffi.Pointer<QrmExtraEncodingInfo>)>();

  /// Copy constructor
  QrmExtraEncodingInfo QrmExtraDuplicate(
    QrmExtraEncodingInfo other,
  ) {
    return _QrmExtraDuplicate(
      other,
    );
  }

  late final _QrmExtraDuplicatePtr = _lookup<
          ffi
          .NativeFunction<QrmExtraEncodingInfo Function(QrmExtraEncodingInfo)>>(
      'QrmExtraDuplicate');
  late final _QrmExtraDuplicate = _QrmExtraDuplicatePtr.asFunction<
      QrmExtraEncodingInfo Function(QrmExtraEncodingInfo)>();

  /// Create none
  QrmExtraEncodingInfo QrmExtraCreateNone() {
    return _QrmExtraCreateNone();
  }

  late final _QrmExtraCreateNonePtr =
      _lookup<ffi.NativeFunction<QrmExtraEncodingInfo Function()>>(
          'QrmExtraCreateNone');
  late final _QrmExtraCreateNone =
      _QrmExtraCreateNonePtr.asFunction<QrmExtraEncodingInfo Function()>();

  /// Init for MicroQR or FCN1 First Position mode
  QrmExtraEncodingInfo QrmExtraCreate(
    int mode,
  ) {
    return _QrmExtraCreate(
      mode,
    );
  }

  late final _QrmExtraCreatePtr =
      _lookup<ffi.NativeFunction<QrmExtraEncodingInfo Function(ffi.Int32)>>(
          'QrmExtraCreate');
  late final _QrmExtraCreate =
      _QrmExtraCreatePtr.asFunction<QrmExtraEncodingInfo Function(int)>();

  /// Init for FCN1 Second Positon mode
  QrmExtraEncodingInfo QrmExtraCreateFnc1Second(
    ffi.Pointer<UnsignedByte> appId,
    int appIdLen,
  ) {
    return _QrmExtraCreateFnc1Second(
      appId,
      appIdLen,
    );
  }

  late final _QrmExtraCreateFnc1SecondPtr = _lookup<
      ffi.NativeFunction<
          QrmExtraEncodingInfo Function(ffi.Pointer<UnsignedByte>,
              UnsignedByte)>>('QrmExtraCreateFnc1Second');
  late final _QrmExtraCreateFnc1Second =
      _QrmExtraCreateFnc1SecondPtr.asFunction<
          QrmExtraEncodingInfo Function(ffi.Pointer<UnsignedByte>, int)>();

  /// Constructor
  QrmStructuredAppend QrmStrAppCreate(
    ffi.Pointer<QrmSegment> segs,
    int segCount,
    int ecLevel,
  ) {
    return _QrmStrAppCreate(
      segs,
      segCount,
      ecLevel,
    );
  }

  late final _QrmStrAppCreatePtr = _lookup<
      ffi.NativeFunction<
          QrmStructuredAppend Function(ffi.Pointer<QrmSegment>, ffi.UnsignedInt,
              ffi.Int32)>>('QrmStrAppCreate');
  late final _QrmStrAppCreate = _QrmStrAppCreatePtr.asFunction<
      QrmStructuredAppend Function(ffi.Pointer<QrmSegment>, int, int)>();

  /// Constructor
  QrmStructuredAppend QrmStrAppCreateEmpty() {
    return _QrmStrAppCreateEmpty();
  }

  late final _QrmStrAppCreateEmptyPtr =
      _lookup<ffi.NativeFunction<QrmStructuredAppend Function()>>(
          'QrmStrAppCreateEmpty');
  late final _QrmStrAppCreateEmpty =
      _QrmStrAppCreateEmptyPtr.asFunction<QrmStructuredAppend Function()>();

  /// Copy constructor
  QrmStructuredAppend QrmStrAppDuplicate(
    QrmStructuredAppend other,
  ) {
    return _QrmStrAppDuplicate(
      other,
    );
  }

  late final _QrmStrAppDuplicatePtr = _lookup<
          ffi
          .NativeFunction<QrmStructuredAppend Function(QrmStructuredAppend)>>(
      'QrmStrAppDuplicate');
  late final _QrmStrAppDuplicate = _QrmStrAppDuplicatePtr.asFunction<
      QrmStructuredAppend Function(QrmStructuredAppend)>();

  void QrmStrAppFillSegs(
    ffi.Pointer<QrmStructuredAppend> target,
    ffi.Pointer<QrmSegment> segs,
    int segCount,
  ) {
    return _QrmStrAppFillSegs(
      target,
      segs,
      segCount,
    );
  }

  late final _QrmStrAppFillSegsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<QrmStructuredAppend>,
              ffi.Pointer<QrmSegment>, ffi.UnsignedInt)>>('QrmStrAppFillSegs');
  late final _QrmStrAppFillSegs = _QrmStrAppFillSegsPtr.asFunction<
      void Function(
          ffi.Pointer<QrmStructuredAppend>, ffi.Pointer<QrmSegment>, int)>();

  void QrmStrAppFillExtraMode(
    ffi.Pointer<QrmStructuredAppend> target,
    QrmExtraEncodingInfo segs,
  ) {
    return _QrmStrAppFillExtraMode(
      target,
      segs,
    );
  }

  late final _QrmStrAppFillExtraModePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<QrmStructuredAppend>,
              QrmExtraEncodingInfo)>>('QrmStrAppFillExtraMode');
  late final _QrmStrAppFillExtraMode = _QrmStrAppFillExtraModePtr.asFunction<
      void Function(ffi.Pointer<QrmStructuredAppend>, QrmExtraEncodingInfo)>();

  /// Destructor
  void QrmStrAppDestroy(
    ffi.Pointer<QrmStructuredAppend> data,
  ) {
    return _QrmStrAppDestroy(
      data,
    );
  }

  late final _QrmStrAppDestroyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<QrmStructuredAppend>)>>(
      'QrmStrAppDestroy');
  late final _QrmStrAppDestroy = _QrmStrAppDestroyPtr.asFunction<
      void Function(ffi.Pointer<QrmStructuredAppend>)>();

  /// Must call this first start
  void QRMatrixInit() {
    return _QRMatrixInit();
  }

  late final _QRMatrixInitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('QRMatrixInit');
  late final _QRMatrixInit = _QRMatrixInitPtr.asFunction<void Function()>();

  /// Get QR Version (dimension) to encode given data.
  /// @return 0 if no suiversion
  int QrmEncoderGetVersion(
    ffi.Pointer<QrmSegment> segments,
    int count,
    int level,
    QrmExtraEncodingInfo extraMode,
    bool isStructuredAppend,
  ) {
    return _QrmEncoderGetVersion(
      segments,
      count,
      level,
      extraMode,
      isStructuredAppend,
    );
  }

  late final _QrmEncoderGetVersionPtr = _lookup<
      ffi.NativeFunction<
          UnsignedByte Function(
              ffi.Pointer<QrmSegment>,
              ffi.UnsignedInt,
              ffi.Int32,
              QrmExtraEncodingInfo,
              ffi.Bool)>>('QrmEncoderGetVersion');
  late final _QrmEncoderGetVersion = _QrmEncoderGetVersionPtr.asFunction<
      int Function(
          ffi.Pointer<QrmSegment>, int, int, QrmExtraEncodingInfo, bool)>();

  /// Encode single QR symbol
  QrmBoard QrmEncoderEncode(
    ffi.Pointer<QrmSegment> segments,
    int count,
    int level,
    QrmExtraEncodingInfo extraMode,
    int minVersion,
    int maskId,
  ) {
    return _QrmEncoderEncode(
      segments,
      count,
      level,
      extraMode,
      minVersion,
      maskId,
    );
  }

  late final _QrmEncoderEncodePtr = _lookup<
      ffi.NativeFunction<
          QrmBoard Function(
              ffi.Pointer<QrmSegment>,
              ffi.UnsignedInt,
              ffi.Int32,
              QrmExtraEncodingInfo,
              UnsignedByte,
              UnsignedByte)>>('QrmEncoderEncode');
  late final _QrmEncoderEncode = _QrmEncoderEncodePtr.asFunction<
      QrmBoard Function(
          ffi.Pointer<QrmSegment>, int, int, QrmExtraEncodingInfo, int, int)>();

  /// Encode Structured Append QR symbols
  /// @return Array of QRMatrixBoard (should be deleted when done).
  ffi.Pointer<QrmBoard> QrmEncoderMakeStructuredAppend(
    ffi.Pointer<QrmStructuredAppend> parts,
    int count,
  ) {
    return _QrmEncoderMakeStructuredAppend(
      parts,
      count,
    );
  }

  late final _QrmEncoderMakeStructuredAppendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<QrmBoard> Function(ffi.Pointer<QrmStructuredAppend>,
              ffi.UnsignedInt)>>('QrmEncoderMakeStructuredAppend');
  late final _QrmEncoderMakeStructuredAppend =
      _QrmEncoderMakeStructuredAppendPtr.asFunction<
          ffi.Pointer<QrmBoard> Function(
              ffi.Pointer<QrmStructuredAppend>, int)>();

  void UPDestroy(
    ffi.Pointer<UnicodePoint> points,
  ) {
    return _UPDestroy(
      points,
    );
  }

  late final _UPDestroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UnicodePoint>)>>(
          'UPDestroy');
  late final _UPDestroy =
      _UPDestroyPtr.asFunction<void Function(ffi.Pointer<UnicodePoint>)>();

  UnicodePoint UPDuplicate(
    UnicodePoint points,
  ) {
    return _UPDuplicate(
      points,
    );
  }

  late final _UPDuplicatePtr =
      _lookup<ffi.NativeFunction<UnicodePoint Function(UnicodePoint)>>(
          'UPDuplicate');
  late final _UPDuplicate =
      _UPDuplicatePtr.asFunction<UnicodePoint Function(UnicodePoint)>();

  UnicodePoint UPCreate(
    ffi.Pointer<Unsigned4Bytes> codes,
    int length,
  ) {
    return _UPCreate(
      codes,
      length,
    );
  }

  late final _UPCreatePtr = _lookup<
      ffi.NativeFunction<
          UnicodePoint Function(
              ffi.Pointer<Unsigned4Bytes>, ffi.UnsignedInt)>>('UPCreate');
  late final _UPCreate = _UPCreatePtr.asFunction<
      UnicodePoint Function(ffi.Pointer<Unsigned4Bytes>, int)>();

  UnicodePoint UPCreateEmpty(
    int length,
  ) {
    return _UPCreateEmpty(
      length,
    );
  }

  late final _UPCreateEmptyPtr =
      _lookup<ffi.NativeFunction<UnicodePoint Function(ffi.UnsignedInt)>>(
          'UPCreateEmpty');
  late final _UPCreateEmpty =
      _UPCreateEmptyPtr.asFunction<UnicodePoint Function(int)>();

  bool UPIsEqual(
    UnicodePoint points1,
    UnicodePoint points2,
  ) {
    return _UPIsEqual(
      points1,
      points2,
    );
  }

  late final _UPIsEqualPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(UnicodePoint, UnicodePoint)>>(
      'UPIsEqual');
  late final _UPIsEqual =
      _UPIsEqualPtr.asFunction<bool Function(UnicodePoint, UnicodePoint)>();

  UnicodePoint UPSubstring(
    UnicodePoint source,
    int startIndex,
    int length,
  ) {
    return _UPSubstring(
      source,
      startIndex,
      length,
    );
  }

  late final _UPSubstringPtr = _lookup<
      ffi.NativeFunction<
          UnicodePoint Function(
              UnicodePoint, ffi.UnsignedInt, ffi.UnsignedInt)>>('UPSubstring');
  late final _UPSubstring = _UPSubstringPtr.asFunction<
      UnicodePoint Function(UnicodePoint, int, int)>();

  /// Simple auto make segments.
  /// Result must be delete when done.
  /// Return NULL if 0 length.
  /// (this is just experimental function:
  /// Base on Byte mode; switch to other mode (create new segment)
  /// if found a segment of text which makes better encoded data
  /// )
  ffi.Pointer<QrmSegment> UPMakeSegments(
    UnicodePoint points,
    int level,
    ffi.Pointer<ffi.UnsignedInt> length,
    bool isMicro,
  ) {
    return _UPMakeSegments(
      points,
      level,
      length,
      isMicro,
    );
  }

  late final _UPMakeSegmentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<QrmSegment> Function(UnicodePoint, ffi.Int32,
              ffi.Pointer<ffi.UnsignedInt>, ffi.Bool)>>('UPMakeSegments');
  late final _UPMakeSegments = _UPMakeSegmentsPtr.asFunction<
      ffi.Pointer<QrmSegment> Function(
          UnicodePoint, int, ffi.Pointer<ffi.UnsignedInt>, bool)>();

  void U8Destroy(
    ffi.Pointer<Utf8String> string,
  ) {
    return _U8Destroy(
      string,
    );
  }

  late final _U8DestroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Utf8String>)>>(
          'U8Destroy');
  late final _U8Destroy =
      _U8DestroyPtr.asFunction<void Function(ffi.Pointer<Utf8String>)>();

  Utf8String U8Copy(
    Utf8String other,
  ) {
    return _U8Copy(
      other,
    );
  }

  late final _U8CopyPtr =
      _lookup<ffi.NativeFunction<Utf8String Function(Utf8String)>>('U8Copy');
  late final _U8Copy = _U8CopyPtr.asFunction<Utf8String Function(Utf8String)>();

  /// Init from bytes of UTF-8 encoded string.
  Utf8String U8Create(
    ffi.Pointer<UnsignedByte> raw,
    int length,
  ) {
    return _U8Create(
      raw,
      length,
    );
  }

  late final _U8CreatePtr = _lookup<
      ffi.NativeFunction<
          Utf8String Function(
              ffi.Pointer<UnsignedByte>, ffi.UnsignedInt)>>('U8Create');
  late final _U8Create = _U8CreatePtr.asFunction<
      Utf8String Function(ffi.Pointer<UnsignedByte>, int)>();

  /// Init from Unicode codes (Encode given Unicode characters into UTF-8)
  Utf8String U8CreateFromUnicodes(
    UnicodePoint unicodes,
  ) {
    return _U8CreateFromUnicodes(
      unicodes,
    );
  }

  late final _U8CreateFromUnicodesPtr =
      _lookup<ffi.NativeFunction<Utf8String Function(UnicodePoint)>>(
          'U8CreateFromUnicodes');
  late final _U8CreateFromUnicodes =
      _U8CreateFromUnicodesPtr.asFunction<Utf8String Function(UnicodePoint)>();

  /// Get Unicode characters code points (decoded data).
  UnicodePoint U8ToUnicodes(
    Utf8String source,
  ) {
    return _U8ToUnicodes(
      source,
    );
  }

  late final _U8ToUnicodesPtr =
      _lookup<ffi.NativeFunction<UnicodePoint Function(Utf8String)>>(
          'U8ToUnicodes');
  late final _U8ToUnicodes =
      _U8ToUnicodesPtr.asFunction<UnicodePoint Function(Utf8String)>();

  void LtDestroy(
    ffi.Pointer<LatinString> string,
  ) {
    return _LtDestroy(
      string,
    );
  }

  late final _LtDestroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<LatinString>)>>(
          'LtDestroy');
  late final _LtDestroy =
      _LtDestroyPtr.asFunction<void Function(ffi.Pointer<LatinString>)>();

  LatinString LtDuplicate(
    LatinString other,
  ) {
    return _LtDuplicate(
      other,
    );
  }

  late final _LtDuplicatePtr =
      _lookup<ffi.NativeFunction<LatinString Function(LatinString)>>(
          'LtDuplicate');
  late final _LtDuplicate =
      _LtDuplicatePtr.asFunction<LatinString Function(LatinString)>();

  /// Init from ISO 8859-1 bytes
  LatinString LtCreate(
    ffi.Pointer<UnsignedByte> raw,
    int length,
  ) {
    return _LtCreate(
      raw,
      length,
    );
  }

  late final _LtCreatePtr = _lookup<
      ffi.NativeFunction<
          LatinString Function(
              ffi.Pointer<UnsignedByte>, ffi.UnsignedInt)>>('LtCreate');
  late final _LtCreate = _LtCreatePtr.asFunction<
      LatinString Function(ffi.Pointer<UnsignedByte>, int)>();

  /// Init from Unicode code points
  LatinString LtCreateFromUnicodes(
    UnicodePoint unicodes,
  ) {
    return _LtCreateFromUnicodes(
      unicodes,
    );
  }

  late final _LtCreateFromUnicodesPtr =
      _lookup<ffi.NativeFunction<LatinString Function(UnicodePoint)>>(
          'LtCreateFromUnicodes');
  late final _LtCreateFromUnicodes =
      _LtCreateFromUnicodesPtr.asFunction<LatinString Function(UnicodePoint)>();

  /// Get Unicode characters code points (decoded data).
  UnicodePoint LtToUnicodes(
    LatinString source,
  ) {
    return _LtToUnicodes(
      source,
    );
  }

  late final _LtToUnicodesPtr =
      _lookup<ffi.NativeFunction<UnicodePoint Function(LatinString)>>(
          'LtToUnicodes');
  late final _LtToUnicodes =
      _LtToUnicodesPtr.asFunction<UnicodePoint Function(LatinString)>();

  void SjDestroy(
    ffi.Pointer<ShiftJisString> string,
  ) {
    return _SjDestroy(
      string,
    );
  }

  late final _SjDestroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ShiftJisString>)>>(
      'SjDestroy');
  late final _SjDestroy =
      _SjDestroyPtr.asFunction<void Function(ffi.Pointer<ShiftJisString>)>();

  ShiftJisString SjDuplicate(
    ShiftJisString other,
  ) {
    return _SjDuplicate(
      other,
    );
  }

  late final _SjDuplicatePtr =
      _lookup<ffi.NativeFunction<ShiftJisString Function(ShiftJisString)>>(
          'SjDuplicate');
  late final _SjDuplicate =
      _SjDuplicatePtr.asFunction<ShiftJisString Function(ShiftJisString)>();

  /// Init with raw ShiftJIS bytes
  ShiftJisString SjCreate(
    ffi.Pointer<UnsignedByte> raw,
    int length,
  ) {
    return _SjCreate(
      raw,
      length,
    );
  }

  late final _SjCreatePtr = _lookup<
      ffi.NativeFunction<
          ShiftJisString Function(
              ffi.Pointer<UnsignedByte>, ffi.UnsignedInt)>>('SjCreate');
  late final _SjCreate = _SjCreatePtr.asFunction<
      ShiftJisString Function(ffi.Pointer<UnsignedByte>, int)>();

  /// Init from Unicode points
  ShiftJisString SjCreateFromUnicodes(
    UnicodePoint unicodes,
  ) {
    return _SjCreateFromUnicodes(
      unicodes,
    );
  }

  late final _SjCreateFromUnicodesPtr =
      _lookup<ffi.NativeFunction<ShiftJisString Function(UnicodePoint)>>(
          'SjCreateFromUnicodes');
  late final _SjCreateFromUnicodes = _SjCreateFromUnicodesPtr.asFunction<
      ShiftJisString Function(UnicodePoint)>();

  /// Get the byte index in `rawString` of character at given `index`
  /// @return Byte index in rawString
  int SJGetCharacterByte(
    ShiftJisString source,
    int index,
    ffi.Pointer<UnsignedByte> charSize,
  ) {
    return _SJGetCharacterByte(
      source,
      index,
      charSize,
    );
  }

  late final _SJGetCharacterBytePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ShiftJisString, ffi.UnsignedInt,
              ffi.Pointer<UnsignedByte>)>>('SJGetCharacterByte');
  late final _SJGetCharacterByte = _SJGetCharacterBytePtr.asFunction<
      int Function(ShiftJisString, int, ffi.Pointer<UnsignedByte>)>();

  /// Get Unicode characters code points (decoded data).
  UnicodePoint SjToUnicodes(
    ShiftJisString source,
  ) {
    return _SjToUnicodes(
      source,
    );
  }

  late final _SjToUnicodesPtr =
      _lookup<ffi.NativeFunction<UnicodePoint Function(ShiftJisString)>>(
          'SjToUnicodes');
  late final _SjToUnicodes =
      _SjToUnicodesPtr.asFunction<UnicodePoint Function(ShiftJisString)>();
}

/// QR Encoding Mode
abstract class QrmEncodingMode {
  /// 0-9
  static const int EModeNumeric = 1;

  /// 0-9, A-Z, $, %, *, +, -, ., /, :, ' '
  static const int EModeAlphaNumeric = 2;

  /// ISO-8859-1 (Unicode Latin-1)
  static const int EModeByte = 4;

  /// Shift JIS double-byte characters
  static const int EModeKanji = 8;
}

/// QR Error correction level
abstract class QrmErrorCorrectionLevel {
  /// L 7%
  static const int ELevelLow = 1;

  /// M 15%
  static const int ELevelMedium = 0;

  /// Q 25%
  static const int ELevelQuarter = 3;

  /// H 30%
  static const int ELevelHigh = 2;
}

/// Value of QR board cell
abstract class QrmBoardCell {
  /// Cell is not filled yet
  static const int CellNeutral = 0;

  /// Cell is white (lower 4 bits)
  static const int CellUnset = 5;

  /// Cell is black (lower 4 bits)
  static const int CellSet = 10;

  /// Cell is finder (higher 4 bits)
  static const int CellFinder = 16;

  /// Cell is separator (higher 4 bits)
  static const int CellSeparator = 32;

  /// Cell is alignment (higher 4 bits)
  static const int CellAlignment = 48;

  /// Cell is timing (higher 4 bits)
  static const int CellTiming = 64;

  /// Cell is dark module (higher 4 bits)
  static const int CellDark = 80;

  /// Cell is format (higher 4 bits)
  static const int CellFormat = 96;

  /// Cell is version (higher 4 bits) (version ≥ 7)
  static const int CellVersion = 112;

  /// Cell is ErrorCorrection
  static const int CellErrorCorrection = 128;

  /// Cell is Remainder
  static const int CellRemainder = 144;

  /// cell & lowMask = lower 4 bits value
  static const int CellLowMask = 15;

  /// cell & highMask = higher 4 bits value
  static const int CellHighMask = 240;

  /// cell & funcMask > 0 => cell is function module
  static const int CellFuncMask = 112;
}

/// QR cells (modules) (not inclues quiet zone)
final class QrmBoard extends ffi.Struct {
  @UnsignedByte()
  external int dimension;

  external ffi.Pointer<ffi.Pointer<UnsignedByte>> buffer;
}

typedef UnsignedByte = ffi.UnsignedChar;

/// Info to make QR Code
final class QrmSymbolInfo extends ffi.Struct {
  /// QR Version
  @UnsignedByte()
  external int version;

  /// EC level
  @ffi.Int32()
  external int level;

  /// Number of data bytes
  @Unsigned2Bytes()
  external int codewords;

  /// Number of EC bytes per block
  @Unsigned2Bytes()
  external int ecCodewordsPerBlock;

  /// Number of group1 blocks
  @Unsigned2Bytes()
  external int group1Blocks;

  /// Number of data bytes for 1 group1 block
  @Unsigned2Bytes()
  external int group1BlockCodewords;

  /// Number of group2 blocks
  @Unsigned2Bytes()
  external int group2Blocks;

  /// Number of data bytes for 1 group2 block
  @Unsigned2Bytes()
  external int group2BlockCodewords;
}

typedef Unsigned2Bytes = ffi.UnsignedShort;

/// Hold information of input data for 1 QR segment.
final class QrmSegment extends ffi.Struct {
  @ffi.Int32()
  external int mode;

  @ffi.UnsignedInt()
  external int length;

  external ffi.Pointer<UnsignedByte> data;

  @ffi.UnsignedInt()
  external int eci;
}

abstract class QrmExtraMode {
  /// none
  static const int XModeNone = 0;

  /// MicroQR
  static const int XModeMicroQr = 1;

  /// FNC1 First Position
  static const int XModeFnc1First = 2;

  /// FNC2 Second Position
  static const int XModeFnc1Second = 3;
}

final class QrmExtraEncodingInfo extends ffi.Struct {
  /// Extra mode
  @ffi.Int32()
  external int mode;

  /// A C-String represents Application Indicator for FNC1 Second Position.
  /// 2 valid forms:
  /// - Single ASCII character [a-z][A-Z] eg. `a`.
  /// - Two ditis number eg. `01`
  external ffi.Pointer<UnsignedByte> appIndicator;

  @UnsignedByte()
  external int appIndicatorLength;
}

final class QrmStructuredAppend extends ffi.Struct {
  /// Data segments
  external ffi.Pointer<QrmSegment> segments;

  /// Count of segments
  @ffi.UnsignedInt()
  external int count;

  /// Error correction info
  @ffi.Int32()
  external int level;

  /// Optional. Limit minimum version
  /// (result version = max(minimum version, required version to fit data).
  @UnsignedByte()
  external int minVersion;

  /// Optional. Force to use given mask (0-7).
  /// Almost for test, you can ignore this.
  @UnsignedByte()
  external int maskId;

  /// Extra mode (MicroQR will be ignored. Not sure about FNC1.)
  external QrmExtraEncodingInfo extraMode;
}

final class UnicodePoint extends ffi.Struct {
  external ffi.Pointer<Unsigned4Bytes> raw;

  @ffi.UnsignedInt()
  external int length;
}

typedef Unsigned4Bytes = ffi.UnsignedInt;

/// Handle unicode (UTF-8) from std::string
final class Utf8String extends ffi.Struct {
  @ffi.Bool()
  external bool isValid;

  external ffi.Pointer<UnsignedByte> raw;

  @ffi.UnsignedInt()
  external int charCount;

  @ffi.UnsignedInt()
  external int byteCount;

  @ffi.UnsignedInt()
  external int maxBytesPerChar;

  external ffi.Pointer<UnsignedByte> charsMap;
}

/// ISO/IEC 8859-1; equivalent of Unicode Latin-1 block
final class LatinString extends ffi.Struct {
  @ffi.Bool()
  external bool isValid;

  /// Note: not NULL ternminated.
  external ffi.Pointer<UnsignedByte> raw;

  @ffi.UnsignedInt()
  external int length;
}

/// Shift-JIS 2 bytes
final class ShiftJisString extends ffi.Struct {
  @ffi.Bool()
  external bool isValid;

  /// Not NULL terminated.
  external ffi.Pointer<UnsignedByte> raw;

  @ffi.UnsignedInt()
  external int charCount;

  @ffi.UnsignedInt()
  external int byteCount;

  @ffi.UnsignedInt()
  external int minBytesPerChar;

  @ffi.UnsignedInt()
  external int maxBytesPerChar;

  external ffi.Pointer<UnsignedByte> charsMap;
}

const int LOGABLE = 0;

const int LOG_MEM = 0;

const String VERSION = '1.1.0';

const int DEFAULT_ECI_ASSIGMENT = 3;
